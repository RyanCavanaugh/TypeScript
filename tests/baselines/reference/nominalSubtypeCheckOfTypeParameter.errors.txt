tests/cases/conformance/types/typeRelationships/recursiveTypes/nominalSubtypeCheckOfTypeParameter.ts(14,11): error TS2321: Excessive stack depth comparing types 'List<T>' and 'Sequence<T>'.


==== tests/cases/conformance/types/typeRelationships/recursiveTypes/nominalSubtypeCheckOfTypeParameter.ts (1 errors) ====
    interface BinaryTuple<T, S> {
        first: T
        second: S
    }
    
    interface Sequence<T> {
        hasNext(): boolean
        pop(): T
        zip<S>(seq: Sequence<S>): Sequence<BinaryTuple<T, S>>
    }
    
    // error, despite the fact that the code explicitly says List<T> extends Sequence<T>, the current rules for infinitely expanding type references 
    // perform nominal subtyping checks that allow variance for type arguments, but not nominal subtyping for the generic type itself
    interface List<T> extends Sequence<T> {
              ~~~~
!!! error TS2321: Excessive stack depth comparing types 'List<T>' and 'Sequence<T>'.
        getLength(): number
        zip<S>(seq: Sequence<S>): List<BinaryTuple<T, S>>
    }
    